// Generated by CoffeeScript 1.8.0
var Storage,
  __hasProp = {}.hasOwnProperty;

Storage = function() {
  var data, getItem, getSheet;
  data = {
    sheets: [
      {
        name: "Новый лист",
        items: []
      }
    ]
  };
  this.data = data;
  this.active = data.sheets[0].items;
  this.ctors = {};
  this.name = 'Проект';
  getItem = function(item, items) {
    var dep, field, name, result, _i, _len, _ref;
    if (item.toJSON != null) {
      return item.toJSON();
    }
    result = {
      _: item.ctor
    };
    for (name in item) {
      if (!__hasProp.call(item, name)) continue;
      field = item[name];
      result[name] = field;
    }
    if (item.dep != null) {
      _ref = item.dep;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dep = _ref[_i];
        result[dep] = item.getId != null ? item.getId(items) : items.indexOf(item);
      }
    }
    return result;
  };
  getSheet = function(sheet) {
    var field, item, name, result;
    result = {};
    for (name in sheet) {
      field = sheet[name];
      result[name] = (function() {
        var _i, _len, _results;
        if (name === 'items') {
          _results = [];
          for (_i = 0, _len = field.length; _i < _len; _i++) {
            item = field[_i];
            _results.push(getItem(item, field));
          }
          return _results;
        } else {
          return field;
        }
      })();
    }
    return result;
  };
  this.getJSON = function() {
    var block, name, result, sheet;
    result = {};
    for (name in data) {
      if (!__hasProp.call(data, name)) continue;
      block = data[name];
      result[name] = (function() {
        var _i, _len, _results;
        if (name === 'sheets') {
          _results = [];
          for (_i = 0, _len = block.length; _i < _len; _i++) {
            sheet = block[_i];
            _results.push(getSheet(sheet));
          }
          return _results;
        } else {
          return block;
        }
      })();
    }
    return JSON.stringify(result, function(key, value) {
      var c;
      if (key === '_') {
        return value;
      }
      c = key[0];
      if (c === '_' || c === '$') {
        return void 0;
      } else {
        return value;
      }
    });
  };
  return this;
};


/*
        return JSON.stringify(data, function(key, value)
        {
        	if((key !== "_" && key[0] === '_') || key[0] === '$') return undefined;
        	if(typeof value === "object" && value.ctor)
        	{
       			var r = {_:value.ctor};
       			for(var x in value) if(value.hasOwnProperty(x) && typeof value[x] !== "function") 
       				r[x] = value[x];
       			var dep = value.dep;
       			for(var x in dep)
       			{
       				var p = dep[x];
       				if(r[p] instanceof Array)
       				{
       					var s = r[p], d = [];
       					for(var y in s) d[y] = getId(s[y]);
       					r[p] = d;
       				}
       				else r[p] = getId(r[p]);
       			}
        		return r;       		
        	}
        	return value;
        });
    };
 */

window.storage = new Storage();
