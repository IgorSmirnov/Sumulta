// Generated by CoffeeScript 1.8.0
(function() {
  this.StorageCtl = function($scope, $rootScope, $location, $resource, OwnedProject) {
    var rp;
    $scope.location = $location;
    $scope.sheets = storage.data.sheets;
    $scope.newSheet = function(name) {
      return storage.data.sheets.push({
        name: name,
        items: []
      });
    };
    $scope.removeSheet = function(sheet) {
      var a;
      rfa(storage.data.sheets, sheet);
      if (sheet.items === storage.active) {
        a = storage.data.active - 1;
        if (a < 0) {
          a++;
        }
        if (a >= storage.data.sheets.length) {
          storage.data.active = null;
          return storage.active = null;
        } else {
          storage.data.active = a;
          return storage.active = storage.data.sheets[a];
        }
      }
    };
    $scope.isSel = function(sheet) {
      return sheet.items === storage.active;
    };
    $scope.select = function(sheet) {
      storage.active = sheet.items;
      return $rootScope.ctl.update();
    };
    $scope.clear = function(name) {
      storage.data.sheets.length = 0;
      $scope.newSheet(name);
      storage.active = storage.data.sheets[0].items;
      return $rootScope.ctl.update();
    };
    $scope["import"] = function() {
      return imp();
    };
    $scope.save = function(name) {
      var json;
      json = storage.getJSON();
      return OwnedProject.update({
        owner: $rootScope.user.name,
        name: name
      }, {
        data: json
      });
    };
    $scope.load = function(owner, project) {
      var json;
      return json = OwnedProject.get({
        owner: owner,
        name: project
      }, function() {
        storage.putJSON(json.item.data);
        $scope.sheets = storage.data.sheets;
        return $rootScope.ctl.update();
      });
    };
    rp = $scope.$routeParams;
    if (rp.user !== 'guest' && rp.project !== 'Новый') {
      return $scope.load(rp.user, rp.project);
    } else {

    }
  };

  this.CoreCtl = function($scope, $rootScope) {
    var ctl, editor, view;
    view = new View(canvas, fast);
    view.seq.push(view.clear);
    ctl = new Controller(view, window);
    editor = new Editor(storage, view, ctl);
    if (typeof Navi !== "undefined" && Navi !== null) {
      Navi(view, ctl);
    }
    if (typeof Grid !== "undefined" && Grid !== null) {
      view.grid = new Grid(view, editor);
      view.seq.push(view.grid.draw);
    }
    view.seq.push(editor.draw);
    window.onresize();
    $rootScope.ctl = ctl;
    $rootScope.storage = storage;
    if (typeof PnL !== "undefined" && PnL !== null) {
      PnL(storage, ctl, editor, view);
    }
    if (typeof Arcs !== "undefined" && Arcs !== null) {
      Arcs(storage, ctl, editor, view);
    }
    if (typeof Arrows !== "undefined" && Arrows !== null) {
      Arrows(storage, ctl, editor, view);
    }
    if (typeof Blocks !== "undefined" && Blocks !== null) {
      Blocks(storage, ctl, editor, view);
    }
    Menu(ui, byId('params'));
    return ui.makeMenu('project', 'edit', 'view', 'create');
  };

}).call(this);
